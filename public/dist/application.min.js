"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","mobile-angular-ui","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("cases"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cases").config(["$stateProvider",function($stateProvider){$stateProvider.state("listActivity",{url:"/activity/:caseId",templateUrl:"modules/cases/views/list-activities.client.view.html"}).state("newCase",{url:"/new/case/{caseId:(?:[^/]+)?}",templateUrl:"modules/cases/views/case-form.client.view.html"}).state("newActivity",{url:"/new/activity/:caseId/{activityId:(?:[^/]+)?}",templateUrl:"modules/cases/views/activity-form.client.view.html"}).state("invoice",{url:"/invoice",templateUrl:"modules/cases/views/invoice.client.view.html"})}]),angular.module("cases").controller("ActivityController",["$scope","$location","Authentication","$timeout","$filter","$stateParams","$http",function($scope,$location,Authentication,$timeout,$filter,$stateParams,$http){return $scope.authentication=Authentication,$scope.authentication.user?$scope.authentication.isDbAuthorized()?void Authentication.connectDropstore().then(function(){$scope.datastore=$scope.authentication.dropstore.datastore;var activityTable=$scope.datastore.getTable("activities"),caseTable=$scope.datastore.getTable("cases");$scope.caseId=$stateParams.caseId,$scope.case=caseTable.get($scope.caseId),$scope.activities=activityTable.query({caseId:$scope.caseId}),$scope.dirtyActivites=$scope.authentication.dropstore.dirtyActivites,$scope.orderProp="activity_time",$scope.reverse=!1,$scope.activityOrder=function(a){return a.get($scope.orderProp)},$scope.downloadAct=function(action){var activities=$scope.datastore.getTable("activities").query({caseId:$scope.caseId}),c=$scope.datastore.getTable("cases").get($scope.caseId),data={};data.timezoneOffset=60*c.get("activity_date").getTimezoneOffset(),data.id=c.getId(),data.case=c.getFields(),data.activities=[],angular.forEach(activities,function(act){data.activities.push(act.getFields())}),$http({method:"POST",url:"download.php",data:data,headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(data){if(data&&data.success)if(action&&"1"===action)window.location.href="mailto:?subject="+encodeURIComponent(data.title)+"&body=%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A"+encodeURIComponent("Download from: "+data.url);else if(action&&"2"===action){var options={files:[{url:data.url,filename:data.title+".docx"}],success:function(){alert("Saved!")},progress:function(){},cancel:function(){},error:function(errorMessage){alert(errorMessage)}};Dropbox.save(options)}else window.location.href=data.url})},$scope.$on("syncStatusChanged",function(){$scope.datastore.getSyncStatus().uploading||($scope.authentication.dropstore.dirtyActivites=$scope.dirtyActivites=[],$scope.$apply())}),$scope.$on("recordChanged",function(event,recordsChanged){var s_ndx,curr_record,records=recordsChanged.affectedRecordsForTable("activities");for(var ndx in records){var record=records[ndx];if(record.isDeleted()){for(s_ndx in $scope.activities)if(curr_record=$scope.activities[s_ndx],curr_record.getId()===record.getId()){$scope.activities.splice($scope.activities.indexOf(curr_record),1);break}}else{$scope.authentication.dropstore.dirtyActivites.push(records[ndx].getId());var found=!1;for(s_ndx in $scope.activities)if(curr_record=$scope.activities[s_ndx],curr_record.getId()===record.getId()){$scope.activities[$scope.activities.indexOf(curr_record)]=record,found=!0;break}found||$scope.activities.push(records[ndx])}}})}):$location.path("/settings/accounts"):$location.path("/signin")}]).controller("NewCaseController",["$scope","$location","Authentication","$timeout","$filter","$stateParams","$rootScope",function($scope,$location,Authentication,$timeout,$filter,$stateParams,$rootScope){return $scope.authentication=Authentication,$scope.authentication.user?$scope.authentication.isDbAuthorized()?void Authentication.connectDropstore().then(function(){if($scope.datastore=$scope.authentication.dropstore.datastore,$scope.caseId=$stateParams.caseId,$scope.caseId){var caseTable=$scope.datastore.getTable("cases");$scope.case_record=caseTable.get($scope.caseId),$scope.case=$scope.case_record.getFields(),$scope.case.activity_date=$filter("date")($scope.case.activity_date,"yyyy-MM-dd")}else $scope.case={};$scope.saveCase=function(c){c.activity_date=new Date(c.activity_date),c.activity_date&&(angular.equals($scope.case_record.getFields(),c)||$scope.case_record.update(c),$location.path("/activity/"+$scope.caseId))},$scope.addCase=function(c){c.activity_date=new Date(c.activity_date),c.activity_date&&($scope.datastore.getTable("cases").insert(c),$location.path("/"))},$scope.deleteCase=function(c){var activities=$scope.datastore.getTable("activities").query({caseId:c.getId()});angular.forEach(activities,function(value){value.deleteRecord()}),c.deleteRecord(),$scope.isLoaded=!1,$rootScope.toggle("myOverlay","off"),$location.path("/")}}):$location.path("/settings/accounts"):$location.path("/signin")}]).controller("NewActivityController",["$scope","$location","Authentication","$timeout","$filter","$stateParams","$rootScope",function($scope,$location,Authentication,$timeout,$filter,$stateParams,$rootScope){return $scope.authentication=Authentication,$scope.authentication.user?$scope.authentication.isDbAuthorized()?void Authentication.connectDropstore().then(function(){$scope.datastore=$scope.authentication.dropstore.datastore,$scope.caseId=$stateParams.caseId,$scope.activityId=$stateParams.activityId,$scope.case_record=$scope.datastore.getTable("cases").get($scope.caseId);var activities=$scope.datastore.getTable("activities").query({caseId:$scope.caseId});activities.length&&($scope.last_activity_time=$filter("orderBy")(activities,function(a){return a.get("activity_time")},!0).shift().get("activity_time"),$scope.last_activity_time=$filter("date")($scope.last_activity_time,"hh:mm a")),$scope.activityId?($scope.activity_record=$scope.datastore.getTable("activities").get($scope.activityId),$scope.activity=$scope.activity_record.getFields(),$scope.activity.activity_time=$filter("date")($scope.activity.activity_time,"hh:mm a")):($scope.activity={},$scope.activity.activity_time=$filter("date")(new Date,"hh:mm a")),$scope.saveActivity=function(a){var matched=a.activity_time.match(/(?:(\d{1,2})(\d{2})(am|pm))|(?:(\d+):(\d+)\s*(am|pm))/i);if(matched&&(matched=matched.filter(function(x){return void 0!==x})),matched&&4===matched.length){var time=new Date($filter("date")($scope.case_record.get("activity_date"),"MM/dd/yyyy")+" "+matched[1]+":"+matched[2]+" "+matched[3]);"Invalid Date"===time?alert("Invalid Time"):(a.activity_time=time,angular.equals($scope.activity_record.getFields(),a)||$scope.activity_record.update(a),$location.path("/activity/"+$scope.caseId))}else alert("Invalid Time")},$scope.addActivity=function(a){var matched=a.activity_time?a.activity_time.match(/(?:(\d{1,2})(\d{2})(am|pm))|(?:(\d+):(\d+)\s*(am|pm))/i):"";if(matched&&(matched=matched.filter(function(x){return void 0!==x})),matched&&4===matched.length){var time=new Date($filter("date")($scope.case_record.get("activity_date"),"MM/dd/yyyy")+" "+matched[1]+":"+matched[2]+" "+matched[3]);"Invalid Date"===time?alert("Invalid Time"):(a.activity_time=time,a.caseId=$scope.caseId,$scope.datastore.getTable("activities").insert(a),$location.path("/activity/"+$scope.caseId))}},$scope.deleteActivity=function(){$scope.activity_record.deleteRecord(),$scope.isLoaded=!1,$rootScope.toggle("myOverlay","off"),$location.path("/activity/"+$scope.caseId)},$scope.$on("syncStatusChanged",function(){$scope.datastore.getSyncStatus().uploading||($scope.authentication.dropstore.dirtyActivites=[],$scope.$apply())}),$scope.$on("recordChanged",function(event,recordsChanged){var records=recordsChanged.affectedRecordsForTable("activities");for(var ndx in records){var record=records[ndx];record.isDeleted()||$scope.authentication.dropstore.dirtyActivites.push(records[ndx].getId())}})}):$location.path("/settings/accounts"):$location.path("/signin")}]).controller("InvoiceController",["$scope","$location","Authentication","$timeout","$filter","$stateParams","$rootScope","$http",function($scope,$location,Authentication,$timeout,$filter,$stateParams,$rootScope,$http){return $scope.authentication=Authentication,$scope.authentication.user?$scope.authentication.isDbAuthorized()?$scope.authentication.dropstore.selectedCases?void Authentication.connectDropstore().then(function(){$scope.datastore=$scope.authentication.dropstore.datastore;var caseIds=$scope.authentication.dropstore.selectedCases,data=[],activityTable=$scope.datastore.getTable("activities"),caseTable=$scope.datastore.getTable("cases"),infoTable=$scope.datastore.getTable("info");angular.forEach(caseIds,function(id){var caseFields=caseTable.get(id).getFields();caseFields.full_name=caseFields.first_name+" "+caseFields.last_name,caseFields.id=id;var actList=activityTable.query({caseId:id}),activities=[],departureTime=0,arrivalTime=0;angular.forEach(actList,function(act){var actFields=act.getFields();activities.push(actFields),"Base D"===actFields.activity_type&&(departureTime=actFields.activity_time.getTime()),"Base A"===actFields.activity_type&&(arrivalTime=actFields.activity_time.getTime())}),data.push({"case":caseFields,quantity:(arrivalTime-departureTime)/36e5,unitCost:""})}),$scope.subTotal=function(){var total=0;return angular.forEach($scope.invoice.items,function(item){total+=item.quantity*item.unitCost}),total},$scope.removeItem=function(item){$scope.invoice.items.splice($scope.invoice.items.indexOf(item),1)},$scope.addItem=function(){$scope.invoice.items.push({"case":{},description:"",activities:[],quantity:1,unitCost:""})},$scope.downloadInvoice=function($attach){$http({method:"POST",url:"download_invoice.php",data:$scope.invoice,headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(data){console.log(data),data&&data.success&&(window.location.href=$attach?"mailto:?subject="+encodeURIComponent(data.title)+"&body=%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A"+encodeURIComponent("Download from: "+data.url):data.url)})};var info=infoTable.query({type:"tlsUserProfile"});info=info.length?info[0].getFields():{},$scope.invoice={id:caseIds.sort().toString(),items:data,date:$filter("date")(new Date,"MMM dd, yyyy"),timezoneOffset:(new Date).getTimezoneOffset(),phone:info.phone||"",company:info.companyName||"",address1:info.companyAddress1||"",address2:info.companyAddress2||"",invoiceNo:"",terms:info.invoiceBillingTerms||"",paid:0}}):$location.path("/"):$location.path("/settings/accounts"):$location.path("/signin")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$location","Authentication","$timeout","$filter",function($scope,$location,Authentication,$timeout,$filter){return $scope.authentication=Authentication,$scope.authentication.user?$scope.authentication.isDbAuthorized()?void Authentication.connectDropstore().then(function(){$scope.datastore=$scope.authentication.dropstore.datastore,$scope.cases=$scope.datastore.getTable("cases").query(),$scope.orderProp="activity_date",$scope.reverse=!0,$scope.keyword="",$scope.caseOrder=function(c){return c.get($scope.orderProp)},$scope.caseFilter=function(c){var kw=$scope.keyword.toLowerCase(),date=$filter("date")(c.get("activity_date"),"MM/dd/yyyy"),match=c.get("client").toLowerCase().match(kw)||c.get("case_no").match(kw)||c.get("first_name").toLowerCase().match(kw)||c.get("last_name").toLowerCase().match(kw)||date.match(kw);return match&&match.length},$scope.authentication.dropstore.selectedCases=$scope.selectedCases=[],$scope.addAllToSelection=function(event){event.target.checked?angular.forEach($scope.cases,function(val){$scope.selectedCases.push(val.getId())}):$scope.selectedCases=[]},$scope.addToSelection=function(event,caseId){$scope.selectionMode&&(event.preventDefault(),$scope.selectedCases.indexOf(caseId)>-1?$scope.selectedCases.splice($scope.selectedCases.indexOf(caseId),1):$scope.selectedCases.push(caseId)),console.log($scope.selectedCases)},$scope.prepareInvoice=function(){$scope.selectedCases.length&&$location.path("/invoice")}}):$location.path("/settings/accounts"):$location.path("/signin")}]),angular.module("core").controller("TopController",["$scope","$location","Authentication","$sce",function($scope,$location,Authentication,$sce){$scope.authentication=Authentication,$scope.connectionStatus=$sce.trustAsHtml('<i class="fa fa-warning text-warning"></i> Disconnected'),$scope.$on("dropstoreConnected",function(){$scope.connectionStatus=$sce.trustAsHtml('<i class="fa fa-check-circle text-success"></i> Connected')}),$scope.$on("syncStatusChanged",function(){$scope.datastore=$scope.authentication.dropstore.datastore,$scope.connectionStatus=$sce.trustAsHtml($scope.datastore.getSyncStatus().uploading?'<i class="fa fa-spinner fa-spin text-warning"></i> Synchronizing':'<i class="fa fa-check-circle text-success"></i> Synchronized')})}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication","$timeout","$filter","$stateParams","$rootScope",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.passwordDetails={},$scope.user||$location.path("/"),Authentication.connectDropstore().then(function(){$scope.datastore=$scope.authentication.dropstore.datastore;var info=$scope.datastore.getTable("info").query({type:"tlsUserProfile"});$scope.userProfile=info.length?info[0].getFields():{companyName:"",firstName:"",lastName:"",phone:"",email:"",invoiceBillingTerms:"",companyAddress1:"",companyAddress2:"",companyCity:"",companyState:"",companyZip:"",type:"tlsUserProfile"},$scope.userProfile=angular.extend($scope.userProfile,{firstName:$scope.user.firstName,email:$scope.user.email,lastName:$scope.user.lastName}),$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.userProfile);user.$update(function(response){$scope.success=!0,Authentication.user=response,info.length&&!angular.equals(info[0].getFields(),$scope.userProfile)?info[0].update($scope.userProfile):0===info.length&&$scope.datastore.getTable("info").insert($scope.userProfile)},function(response){$scope.error=response.data.message})}else $scope.submitted=!0}}),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",["dropstoreClient","$rootScope","$window","$q",function(dropstoreClient,$rootScope,$window){var _this=this;return _this._data={user:window.user,dropstore:{}},_this._data.isDbAuthorized=function(){if(_this._data.user&&_this._data.user.additionalProvidersData&&_this._data.user.additionalProvidersData.dropbox){var accessToken=_this._data.user.additionalProvidersData.dropbox.accessToken;return accessToken}},_this._data.connectDropstore=function(){if(_this._data.dropstore.datastore)return _this._data.dropstore.c;var _datastoreManager,client=new Dropbox.Client({key:$window.dropboxAppId,token:_this._data.isDbAuthorized()}),c=dropstoreClient.create(client).authenticate({interactive:!1}).then(function(datastoreManager){return _datastoreManager=datastoreManager,datastoreManager.openDefaultDatastore()}).then(function(datastore){_this._data.dropstore.datastore=datastore,_this._data.dropstore.dirtyActivites=[],_this._data.dropstore.datastoreManager=_datastoreManager,$rootScope.$broadcast("dropstoreConnected"),$window.onbeforeunload=function(){return datastore&&datastore.getSyncStatus().uploading?"You have pending changes that haven't been synchronized to the server.":void 0},_datastoreManager.SubscribeRecordsChanged(function(records){$rootScope.$broadcast("recordChanged",records)}),_datastoreManager.SubscribeSyncStatusChanged(function(){$rootScope.$broadcast("syncStatusChanged")})}).catch(function(err){alert(err.toString())});return _this._data.dropstore.c=c,c},_this._data}]),angular.module("users").factory("dropstoreClient",["$q","dropstoreDatastoreManager",function($q,dropstoreDatastoreManager){var dropstoreServices={};return dropstoreServices.create=function(client){return dropstoreServices._client=client,dropstoreServices},dropstoreServices.authenticate=function(options){var deferred=$q.defer();return dropstoreServices._client.authenticate(options,function(err,res){err?deferred.reject(err):dropstoreServices._client.isAuthenticated()&&deferred.resolve(dropstoreDatastoreManager(res))}),deferred.promise},dropstoreServices}]).factory("dropstoreDatastoreManager",["$q",function($q){return function(_client){var dropstoreDatastoreManagerService={};return dropstoreDatastoreManagerService._client=_client,dropstoreDatastoreManagerService._datastoreManager=dropstoreDatastoreManagerService._client.getDatastoreManager(),dropstoreDatastoreManagerService.openDefaultDatastore=function(){var deferred=$q.defer();return dropstoreDatastoreManagerService._datastoreManager.openDefaultDatastore(function(err,datastore){err?deferred.reject(err):(dropstoreDatastoreManagerService._datastore=datastore,deferred.resolve(datastore))}),deferred.promise},dropstoreDatastoreManagerService.SubscribeRecordsChanged=function(callback){return dropstoreDatastoreManagerService._datastore.recordsChanged.addListener(callback),callback},dropstoreDatastoreManagerService.SubscribeSyncStatusChanged=function(callback){return dropstoreDatastoreManagerService._datastore.syncStatusChanged.addListener(callback),callback},dropstoreDatastoreManagerService.signOut=function(options,callback){dropstoreDatastoreManagerService._client.signOut(options,function(err){return callback(err)})},dropstoreDatastoreManagerService}}]).directive("focusAndSelect",function($timeout){return{restrict:"A",link:function(scope,element){!function(e){$timeout(function(){e[0].select()},200)}(element)}}}).directive("ngReallyClick",[function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("click",function(){var message=attrs.ngReallyMessage;message&&confirm(message)&&scope.$apply(attrs.ngReallyClick)})}}}]).directive("syncFocusWith",function(){return function(scope,elem,attrs){scope.$watch(attrs.syncFocusWith,function(){elem[0].focus()})}}),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);